<?php

class DBTNGCustomUnitTestCase extends DrupalWebTestCase{


    public static function getInfo()
    {
        return array(
            'name' => 'DBTNG custom unit and UI tests',
            'description' => 'various unit tests on dbtng custom module.',
            'group' => 'Custom'
        );
    }


    public function setUp(){
        parent::setUp('dbtng_custom');
    }

    public function testInstall(){
        $result = dbtng_custom_entry_load();
        $this->assertEqual(
            count($result),
            2,
            'Two Entries in the Table'
        );
    }


      public function testUI() {

        $this->drupalGet('drupal-7.64/sites/all/modules/dbtng_custom');
        $this->assertPattern("/John[td\/<>\w]+Doe/", "Text 'John Doe' found in table");


        $this->drupalPost('drupal-7.64/sites/all/modules/dbtng_custom/add',
          array(
            'name'  => 'Some',
            'jobs' => 'Anonymous',
            'age' => 33,
          ),
          t('Add')
        );

        $this->drupalGet('drupal-7.64/sites/all/modules/dbtng_custom');
        $this->assertPattern("/Some[td\/<>\w]+Anonymous/", "Text 'Some Anonymous' found in table");


        $result = dbtng_custom_entry_load(array('jobs' => 'Anonymous'));
        $this->drupalGet("drupal-7.64/sites/all/modules/dbtng_custom");
        $this->assertEqual(
          count($result),
          1,
          'Found one entry in the table with jobs = "Anonymous".'
        );
        $entry = $result[0];
        unset($entry->uid);
        $entry->name = 'NewFirstName';
        $this->drupalPost('drupal-7.64/sites/all/modules/dbtng_custom/update', (array) $entry, t('Update'));

        $this->drupalGet('drupal-7.64/sites/all/modules/dbtng_custom/dbtng');
        $this->assertPattern("/NewFirstName[td\/<>\w]+Anonymous/", "Text 'NewFirstName Anonymous' found in table");


        $this->drupalGet('drupal-7.64/sites/all/modules/dbtng_custom/advanced');
        $rows = $this->xpath("//*[@id='block-system-main']/div/table[1]/tbody/tr");
        $this->assertEqual(count($rows), 1, "One row found in advanced view");
        $this->assertFieldByXPath("//*[@id='block-system-main']/div/table[1]/tbody/tr/td[4]", "Roe", "Name 'Roe' Exists in advanced list");
      }


       public function testAPIExamples() {

          $entry = array(
            'name' => 'James',
            'jobs' => 'Doe',
            'age' => 23,
          );
          dbtng_custom_entry_insert($entry);


          $entry = array(
            'name' => 'Jane',
            'jobs' => 'NotDoe',
            'age' => 19,
          );
          dbtng_custom_entry_insert($entry);


          $result = dbtng_custom_entry_load();
          $this->assertEqual(
            count($result),
            4,
            'Found a total of four entries in the table after creating two additional entries.'
          );


          $result = dbtng_custom_entry_load(array('jobs' => 'Doe'));
          $this->assertEqual(
            count($result),
            2,
            'Found two entries in the table with jobs = "Doe".'
          );


          $result = dbtng_custom_entry_load(array('jobs' => 'NotDoe'));
          $this->assertEqual(
            count($result),
            1,
            'Found one entry in the table with jobs "NotDoe');


          $entry = $result[0];
          $entry->jobs = "NowDoe";
          dbtng_custom_entry_update((array) $entry);

          $result = dbtng_custom_entry_load(array('jobs' => 'NowDoe'));
          $this->assertEqual(
            count($result),
            1,
            "Found renamed 'NowDoe' jobs");


          $result = dbtng_custom_entry_load(array('name' => 'John', 'jobs' => 'Doe'));
          $this->assertEqual(
            count($result),
            1,
            'Found one entry for John Doe.'
          );

          $entry = (array) end($result);

          $entry['age'] = 45;

          dbtng_custom_entry_update((array) $entry);



          $result = dbtng_custom_entry_load(array('jobs' => 'NowDoe'));
          $this->assertEqual(
            count($result),
            1,
            'Found one entry with jobs = Nowdoe.'
          );


          $entry = (array) end($result);
          $this->assertEqual(
            $entry['name'],
            'Jane',
            'The name Jane is found in the entry'
          );
          $this->assertEqual(
            $entry['jobs'],
            'NowDoe',
            'The jobs NowDoe is found in the entry'
          );


          dbtng_custom_entry_delete($entry);


          $result = dbtng_custom_entry_load();
          $this->assertEqual(
            count($result),
            3,
            'Found only three records, a record was deleted.'
          );
        }
}